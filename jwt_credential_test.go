package kong

import (
	"net/http"
	"net/url"
	"testing"

	"github.com/magicalbanana/tg"
	"github.com/stretchr/testify/require"
)

func TestClient_CreateJWTCredential_Success(t *testing.T) {
	u, err := url.Parse(kongURL())
	require.NoError(t, err)
	client := NewClient(1, 1, u)

	usernameOrCustomID, err := tg.RandGen(10, tg.Digit, "", "")
	require.NoError(t, err)
	r, err := client.CreateConsumer(usernameOrCustomID)
	require.NoError(t, err)
	require.NotNil(t, r)

	key, err := tg.RandGen(10, tg.Digit, "", "")
	require.NoError(t, err)
	secret, err := tg.RandGen(10, tg.Digit, "", "")
	require.NoError(t, err)

	resp, err := client.CreateJWTCredential(usernameOrCustomID, key, secret)
	require.NoError(t, err)
	require.NotNil(t, resp)
	// the ID that's returned is not the custom ID that was used to create
	// the JWT token but instead the ID generated by Kong
	require.Equal(t, r.ID, resp.CustomID)
	require.NotEmpty(t, resp.ID)
}

func TestClient_CreateJWTCredential_CustomerDoesNotExist(t *testing.T) {
	u, err := url.Parse(kongURL())
	require.NoError(t, err)
	client := NewClient(1, 1, u)

	usernameOrCustomID, err := tg.RandGen(10, tg.Digit, "", "")
	require.NoError(t, err)

	key, err := tg.RandGen(10, tg.Digit, "", "")
	require.NoError(t, err)
	secret, err := tg.RandGen(10, tg.Digit, "", "")
	require.NoError(t, err)

	resp, err := client.CreateJWTCredential(usernameOrCustomID, key, secret)
	require.Error(t, err)
	errx := err.(Error)
	require.Equal(t, http.StatusNotFound, errx.ResponseCode())
	require.Nil(t, resp)
}

func TestClient_DeleteJWTCredential_Success(t *testing.T) {
	u, err := url.Parse(kongURL())
	require.NoError(t, err)
	client := NewClient(1, 1, u)

	usernameOrCustomID, err := tg.RandGen(10, tg.Digit, "", "")
	require.NoError(t, err)
	r, err := client.CreateConsumer(usernameOrCustomID)
	require.NoError(t, err)
	require.NotNil(t, r)

	key, err := tg.RandGen(10, tg.Digit, "", "")
	require.NoError(t, err)
	secret, err := tg.RandGen(10, tg.Digit, "", "")
	require.NoError(t, err)

	resp, err := client.CreateJWTCredential(usernameOrCustomID, key, secret)
	require.NoError(t, err)
	require.NotNil(t, resp)
	require.Equal(t, r.ID, resp.CustomID)
	require.NotEmpty(t, resp.ID)

	err = client.DeleteJWTCredential(usernameOrCustomID, resp.ID)
	require.NoError(t, err)
}
