package kong

import (
	"net/http"
	"testing"

	"github.com/ParaServices/kong/object"
	"github.com/ParaServices/kong/plugin"
	"github.com/magicalbanana/tg"
	"github.com/stretchr/testify/require"
)

func TestClient_CreateJWTCredential(t *testing.T) {
	t.Run("create success", func(t *testing.T) {
		client, err := NewClient(kongURL(t))
		require.NoError(t, err)

		customID, err := tg.RandGen(10, tg.Digit, "", "")
		require.NoError(t, err)
		consumer := object.NewConsumer(customID, customID)
		r, err := client.CreateConsumer(consumer)
		require.NoError(t, err)
		require.NotNil(t, r)

		key, err := tg.RandGen(10, tg.Digit, "", "")
		require.NoError(t, err)
		secret, err := tg.RandGen(10, tg.Digit, "", "")
		require.NoError(t, err)

		jwtCred := plugin.JWTCredential{
			Consumer: &object.KongID{
				ID: customID,
			},
			Key:    key,
			Secret: secret,
		}

		resp, err := client.CreateJWTCredential(&jwtCred)
		require.NoError(t, err)
		require.NotNil(t, resp)
		// the ID that's returned is not the custom ID that was used to create
		// the JWT token but instead the ID generated by Kong
		require.Equal(t, r.GetID(), resp.GetConsumer().GetID())
		require.NotEmpty(t, resp.ID)
	})
}

func TestClient_CreateJWTCredential_CustomerDoesNotExist(t *testing.T) {
	t.Run("consumer does not exist", func(t *testing.T) {
		client, err := NewClient(kongURL(t))
		require.NoError(t, err)

		customID, err := tg.RandGen(10, tg.Digit, "", "")
		require.NoError(t, err)

		jwtCred := plugin.JWTCredential{
			Consumer: &object.KongID{
				ID: customID,
			},
			Key:    "key",
			Secret: "secret",
		}

		resp, err := client.CreateJWTCredential(&jwtCred)
		require.Error(t, err)
		errx := err.(KongError)
		require.Equal(t, http.StatusNotFound, errx.ResponseCode())
		require.Nil(t, resp)
	})
}

func TestClient_DeleteJWTCredential(t *testing.T) {
	t.Run("delete success", func(t *testing.T) {
		client, err := NewClient(kongURL(t))
		require.NoError(t, err)

		customID, err := tg.RandGen(10, tg.Digit, "", "")
		require.NoError(t, err)
		consumer := object.NewConsumer(customID, customID)
		r, err := client.CreateConsumer(consumer)
		require.NoError(t, err)
		require.NotNil(t, r)

		key, err := tg.RandGen(10, tg.Digit, "", "")
		require.NoError(t, err)
		secret, err := tg.RandGen(10, tg.Digit, "", "")
		require.NoError(t, err)

		jwtCred := plugin.JWTCredential{
			Consumer: &object.KongID{
				ID: customID,
			},
			Key:    key,
			Secret: secret,
		}

		createdJWTCred, err := client.CreateJWTCredential(&jwtCred)
		require.NoError(t, err)
		require.NotNil(t, createdJWTCred)
		require.Equal(t, r.GetID(), createdJWTCred.GetConsumer().GetID())
		require.NotEmpty(t, createdJWTCred.ID)

		err = client.DeleteJWTCredential(createdJWTCred)
		require.NoError(t, err)
	})
}
